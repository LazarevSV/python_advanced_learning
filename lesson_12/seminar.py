
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–π.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤.


# class Factorial:
# def __init__(self, limit: int):
# self.limit = limit
# self.result = []
#
# def __call__(self, count: int):
# fact = 1
# list_fact = []
# for i in range(1, count):
# fact *= i
# list_fact.append(fact)
# self.result.append(list_fact[-self.limit:])
# return fact

# *************
# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
# –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1.
# –°–æ–∑–¥–∞–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
# —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª.


import json

# class Factorial:
# def __init__(self, limit: int):
# self.limit = limit
# self.result = []
#
# def __call__(self, count: int):
# fact = 1
# list_fact = []
# for i in range(1, count):
# fact *= i
# list_fact.append(fact)
# self.result.append(list_fact[-self.limit:])
# return fact
#
# def __enter__(self):
# return self
#
# def __exit__(self, exc_type, exc_val, exc_tb):
# filename='result.json'
# with open(filename, 'w', encoding='utf-8') as file:
# json.dump(self.result, file)
#
#
# f1 = Factorial(3)
# with f1 as json_file:
# json_file(5)
# #



# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ3 üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
# üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.

# class FactRange:
# def __init__(self, *args):
# data = args[:3]
# self.start, self.step = 1, 1
# if len(data) == 1:
# self.stop = data[0]
# elif len(data) == 2:
# self.start, self.stop = data
# else:
# self.start, self.stop, self.step = data
# self.data = [*range(self.start, self.stop+1, self.step)]
# self.value = 1
#
# def _get_fact(self, limit):
# fact = 1
# for i in range(1, limit + 1):
# fact *= i
# self.value = fact
# return fact
#
# def __iter__(self):
# return self
#
# def __next__(self):
# if self.data:
# return self._get_fact(self.data.pop(0))
# raise StopIteration
#
# def __str__(self):
# return str(self.value)
#
#
# if __name__ == '__main__':
# factorial_gen = FactRange(5,10,3)
# for i in factorial_gen:
# print(i)

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤.
# –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É
# –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –≤—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö).
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤.

# class Rectangle:
# def __init__(self, length, width=None):
# self._length = length
# self._width = width if width else length
#
# def perimeter(self):
# return 2 * self._length + 2 * self._width
#
# def area(self):
# return self._width * self._length
#
# @property
# def length(self):
# return self._length
#
# @property
# def width(self):
# return self._width
#
# @length.setter
# def length(self, value):
# if value>0:
# self._length=value
# else:
# raise ValueError ('–†–∞–∑–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
#
# @width.setter
# def width(self, value):
# if value > 0:
# self._width = value
# else:
# raise ValueError('–†–∞–∑–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
#
#
# rect1=Rectangle(3,4)
# rect1.length=10
# print(rect1.length)
# #rect1.width=-3


# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6


# üìå –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# üìå –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –Ω–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—Ä–∞.


class SideValidate:

def __init__(self, min_value: float = None, max_value: float = None):
self.min_value = min_value
self.max_value = max_value

def __set_name__(self, owner, name):
self.param_name = '_' + name

def __get__(self, instance, owner):
return getattr(instance, self.param_name)

def __set__(self, instance, value):
self.validate(value)
setattr(instance, self.param_name, value)

def validate(self, value):
if self.min_value is not None and value < self.min_value:
raise ValueError(f'{value} is lesser than {self.min_value}')
if self.max_value is not None and value > self.max_value:
raise ValueError(f'{value} is greater than {self.max_value}')


class Rectangle:
side_a = SideValidate(1, 20)
side_b = SideValidate(1, 15)

def __init__(self, a, b):
self.side_a = a
self.side_b = b

def __str__(self):
return f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ {self.side_a} x {self.side_b}'


rect_1 = Rectangle(20, 20)
print(rect_1)


–î–ï–°–ö–†–ò–ü–¢–û–† - —ç—Ç–æ –∫–ª–∞—Å—Å –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç—å—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–∞—à–∏—Ö –∫–ª–∞—Å—Å–æ–≤
–≤ –∏–Ω–∏—Ç –ø–µ—Ä–µ–¥–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è

—Å–æ—Å—Ç–æ–∏—Ç –∏–∑

__set_name__
def __set_name__(self, owner, name):
self.param_name = '_' + name

__get__

def __get__(self, instance, owner):
return getattr(instance, self.param_name)



__set__


def __set__(self, instance, value):
self.validate(value)
setattr(instance, self.param_name, value)